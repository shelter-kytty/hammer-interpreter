

type : T = {
    tp = typeOf(T)
    if tp == 11
    then T["Type"] or 11
    else tp
}

Person : a h n = [
    "Type"   => 12
    "Age"    => a
    "Height" => h
    "Name"   => n
    "Introduce" => _ : = printf(f"Hi, my name is {1}, I'm {2} feet tall and {3} years old\n" ; n ; h ; a)
    "Compare" => _ : other = {
        printf(f"Well, my name is {1} and yours is {2}\n" ; n ; Name(other))
        printf(f"I'm {1} feet tall, and you're {2}\n" ; h ; Height(other))
        printf(f"And I'm {1}- but you're {2}\n" ; a ; Age(other))
    }
    "Child" => _ : other = Person(Age(other) + a / 10 ; Height(other) + h * 3 ; {Name(other) .. n})
]

// Field access
Age : r = r["Age"]
Height : r = r["Height"]
Name : r = r["Name"]

// Method call
Introduce : r = r["Introduce"]()
Compare : r o = r["Compare"](o)
Child : r o = r["Child"](o)


guy = Person(33 ; 5.0 ; "Jeremy")
dude = Person(40 ; 6.4 ; "Mark")


// All do exact same thing
print Age(guy)
print Age(dude)

print Height(guy)
print Height(dude)

print Name(guy)
print Name(dude)

Introduce(guy)
Introduce(dude)

Compare(guy ; dude)
Compare(dude ; guy)

bab = Child(guy ; dude)
bub = Child(dude ; guy)

print bab
print bub

print Age(bab)
print Age(bub)

print Height(bab)
print Height(bub)

print Name(bab)
print Name(bub)

Introduce(bab)
Introduce(bub)

Compare(bab ; bub)
Compare(bub ; bab)
